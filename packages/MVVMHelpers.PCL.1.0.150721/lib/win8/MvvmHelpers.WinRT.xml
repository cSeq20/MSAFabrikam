<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmHelpers.WinRT</name>
    </assembly>
    <members>
        <member name="T:JulMar.Behaviors.BindableCommand">
            <summary>
            This class can be used to create a bound ICommand in resources based on the 
            active DataContext and then used in other namescopes such as an inner DataTemplate
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.BindableCommand.CommandProperty">
            <summary>
            ICommand implementation to bind to the input type.
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.BindableCommand.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.BindableCommand.Command">
            <summary>
            Gets and sets the Command
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.BindableCommand.CommandParameter">
            <summary>
            Gets and sets the CommandParameter
            </summary>
        </member>
        <member name="E:JulMar.Behaviors.BindableCommand.CanExecuteChanged">
            <summary>
            This is used to determine if the command validity has changed.
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.BindableCommand.CanExecute(System.Object)">
            <summary>
            Returns whether the command is valid
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Behaviors.BindableCommand.Execute(System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:JulMar.Behaviors.EventCommander">
            <summary>
            This class manages a collection of command to event mappings.  It is used to wire up View events to a
            ViewModel ICommand implementation. 
            </summary>
            <example>
            <![CDATA[
            
            <Behaviors:EventCommander.Mappings>
               <Behaviors:CommandEvent Command="{Binding PointerEnterCommand}" Event="PointerEnter" />
               <Behaviors:CommandEvent Command="{Binding PointerLeaveCommand}" Event="PointerLeave" />
            </Behaviors:EventCommander.Mappings>
            
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Behaviors.EventCommander.MappingsProperty">
            <summary>
            Mappings backing store
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.EventCommander.GetMappings(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the mapping collection
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Behaviors.EventCommander.SetMappings(Windows.UI.Xaml.DependencyObject,JulMar.Behaviors.CommandEventCollection)">
            <summary>
            This sets the mapping collection.
            </summary>
            <param name="obj">Dependency Object</param>
            <param name="value">Mapping collection</param>
        </member>
        <member name="M:JulMar.Behaviors.EventCommander.OnMappingsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This changes the event mapping
            </summary>
            <param name="target"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Behaviors.EventParameters">
            <summary>
            This is passed to the ICommand handler for the event
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.EventParameters.Sender">
            <summary>
            The sender of the handled event
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.EventParameters.EventArgs">
            <summary>
            The passed EventArgs for the event.
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.EventParameters.Command">
            <summary>
            The ICommand which has just been executed
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.EventParameters.CommandParameter">
            <summary>
            The associated CommandParameter (if any).
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.EventParameters.#ctor(System.Windows.Input.ICommand,System.Object,System.Object,System.Object)">
            <summary>
            Constructor for the EventParameters
            </summary>
            <param name="command">ICommand</param>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
            <param name="parameter">CommandParameter</param>
        </member>
        <member name="T:JulMar.Behaviors.CommandEvent">
            <summary>
            This represents a single event to command mapping. 
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.CommandEvent.CommandProperty">
            <summary>
            Command Property Dependency Property
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.CommandEvent.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.CommandEvent.EventProperty">
            <summary>
            Event Dependency Property
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.CommandEvent.Event">
            <summary>
            Gets or sets the Event property.
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.CommandEvent.Command">
            <summary>
            Gets or sets the Command property. 
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.CommandEvent.CommandParameter">
            <summary>
            Gets or sets the CommandParameter property.
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.CommandEvent.Subscribe(System.Object)">
            <summary>
            Wires up an event to the target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEvent.LookForEventDeclaration(System.Object,System.String)">
            <summary>
            This searches the type for a given event - including ancestor classes.
            </summary>
            <param name="target"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Behaviors.CommandEvent.Unsubscribe(System.Object)">
            <summary>
            Unwires target event
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEvent.GetEventMethod(System.Reflection.EventInfo)">
            <summary>
            Retrieves a delegate to our OnEventRaised method which may be used with a specific
            EventHandler subtype based on an EventInfo.
            </summary>
            <param name="ei">Event to generate</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Behaviors.CommandEvent.OnEventRaised(System.Object,System.Object)">
            <summary>
            This is invoked by the event - it invokes the command.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Behaviors.CommandEventCollection">
            <summary>
            Collection of command to event mappings
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.Subscribe(System.Object)">
            <summary>
            Wire up events to the target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.Unsubscribe(System.Object)">
            <summary>
            Unwire all target events
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This handles the collection change event - it then subscribes and unsubscribes events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.OnItemAdded(JulMar.Behaviors.CommandEvent)">
            <summary>
            A new item has been added to the event list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JulMar.Behaviors.CommandEventCollection.OnItemRemoved(JulMar.Behaviors.CommandEvent)">
            <summary>
            An item has been removed from the event list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:JulMar.Behaviors.FocusScope">
            <summary>
            Focus Scope class which allows you to set focus initially to a Control
            </summary>
        </member>
        <member name="F:JulMar.Behaviors.FocusScope.InitialFocusProperty">
            <summary>
            Focus property - set this on a UI element to change focus when loaded.
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.FocusScope.GetInitialFocus(Windows.UI.Xaml.Controls.Control)">
            <summary>
            Get the initial focus property from a Control
            </summary>
            <param name="theControl">Control</param>
            <returns>Current setting</returns>
        </member>
        <member name="M:JulMar.Behaviors.FocusScope.SetInitialFocus(Windows.UI.Xaml.Controls.Control,System.Boolean)">
            <summary>
            Set the initial focus property onto a control.
            </summary>
            <param name="theControl">Control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:JulMar.Behaviors.FocusScope.OnSetFocusChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the focus state property changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Behaviors.FocusScope.TrySetFocus(Windows.UI.Xaml.Controls.Control)">
            <summary>
            This attempts to programmatically set focus to the given control
            </summary>
            <param name="theControl">Control to set focus to</param>
        </member>
        <member name="M:JulMar.Behaviors.FocusScope.TheControlOnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            This is called when the associated control is loaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Behaviors.NameScopeBinding">
            <summary>
            This class allows ElementName bindings to be carried into attached properties
            and behaviors by placing a reference to them into a resource collection
            </summary>
            <example>
            <![CDATA[
            <Page.Resources>
               <NameScopeBinding Source="{Binding ElementName=theList}" />
            </Page.Resources>
            <ListBox x:Name=theList>
               <interactivity:Interaction.Triggers>
                  <interactivity:EventTrigger EventName="SelectionChanged">
                     <julmar:InvokeCommand Command="{Binding SelectCommand}" CommandParameter="{Binding Source.SelectedItem, Source={StaticResource theList}}" />
                  </interactivity:EventTrigger>
               <interactivity:Interaction.Triggers>
            </ListBox>
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Behaviors.NameScopeBinding.SourceProperty">
            <summary>
            Backing storage for Element property
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.NameScopeBinding.Source">
            <summary>
            Source to bind to and make available as a resource
            </summary>
        </member>
        <member name="T:JulMar.Behaviors.StyleSetter">
            <summary>
            Class to help bind setters in a Style as Metro doesn't support it in V1. This class may be removed once the support is added to
            the binding engine.
            </summary>
            <notes>
            This class was adapted from the Silverlight version written by David Anson
            http://blogs.msdn.com/b/delay/archive/2009/11/02/as-the-platform-evolves-so-do-the-workarounds-better-settervaluebindinghelper-makes-silverlight-setters-better-er.aspx
            </notes>
            <example>
            <![CDATA[
            
            <Style TargetType="ListBoxItem">
               <Setter Property="julmar:StyleSetter.PropertyBindings">
                  <Setter.Value>
                     <SetterValueBinding Type="Canvas" Property="Left" Binding="{Binding X}" />
                     <SetterValueBinding Type="Canvas" Property="Top" Binding="{Binding Y}" />
                  </Setter.Value>
               </Setter>
            </Style>
            ]]>
            </example>
        </member>
        <member name="P:JulMar.Behaviors.StyleSetter.Values">
            <summary>
            Collection of SetterValueBindingHelper instances to apply to the
            target element.
            </summary>
            <remarks>
            Used when multiple Bindings need to be applied to the same element.
            </remarks>
        </member>
        <member name="F:JulMar.Behaviors.StyleSetter.PropertyBindingsProperty">
            <summary>
            PropertyBinding attached DependencyProperty.
            </summary>
        </member>
        <member name="M:JulMar.Behaviors.StyleSetter.GetPropertyBindings(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the value of the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of PropertyBinding attached DependencyProperty.</returns>
        </member>
        <member name="M:JulMar.Behaviors.StyleSetter.SetPropertyBindings(Windows.UI.Xaml.FrameworkElement,JulMar.Behaviors.StyleSetter)">
            <summary>
            Sets the value of the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value forPropertyBinding attached DependencyProperty.</param>
        </member>
        <member name="M:JulMar.Behaviors.StyleSetter.OnPropertyBindingPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="dpo">Object on which the property was changed.</param>
            <param name="e">Property change arguments.</param>
        </member>
        <member name="M:JulMar.Behaviors.StyleSetter.ApplyBinding(Windows.UI.Xaml.FrameworkElement,JulMar.Behaviors.SetterValueBinding)">
            <summary>
            Applies the Binding represented by the SetterValueBindingHelper.
            </summary>
            <param name="element">Element to apply the Binding to.</param>
            <param name="item">SetterValueBindingHelper representing the Binding.</param>
        </member>
        <member name="T:JulMar.Behaviors.SetterValueBinding">
            <summary>
            A binding value to apply to a Style setter
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.SetterValueBinding.Type">
            <summary>
            Optional type parameter used to specify the type of an attached
            DependencyProperty as an assembly-qualified name, full name, or
            short name.
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.SetterValueBinding.Property">
            <summary>
            Property name for the normal/attached DependencyProperty on which
            to set the Binding.
            </summary>
        </member>
        <member name="P:JulMar.Behaviors.SetterValueBinding.Binding">
            <summary>
            Binding to set on the specified property.
            </summary>
        </member>
        <member name="T:JulMar.Extensions.DependencyObjectExtensions">
            <summary>
            Dependency Object extensions
            </summary>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.FindElement``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Searches the sub-tree of an element (including that element) 
            for an element of a particular type.
            </summary>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.FindVisualParent(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            This method locates the first visual parent of the given Type.
            </summary>
            <param name="fe">Framework Element</param>
            <param name="lookForType">Specific type to look for</param>
            <returns>Visual Parent</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.FindVisualParent``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This method locates the first visual parent of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <returns>Visual Parent</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.FindVisualChild``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This method locates the first visual child of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <returns>Visual Child</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.FindVisualChildByName``1(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            This method locates a visual child by NAME of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <param name="name">Name to look for (assigned to Name property)</param>
            <returns>Visual Child or null</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.EnumerateVisualTree``1(Windows.UI.Xaml.DependencyObject,System.Predicate{``0})">
            <summary>
            A simple iterator method to expose the visual tree to LINQ (parent to child).
            </summary>
            <param name="start">Starting root</param>
            <param name="predicate">Predicate called for each item to provide filter (can be null)</param>
            <returns>Enumerable list of visuals</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.ReverseEnumerateVisualTree``1(Windows.UI.Xaml.DependencyObject,System.Predicate{``0})">
            <summary>
            A simple iterator method to expose the visual tree to LINQ going backwards (child to parent)
            </summary>
            <param name="start">Starting child</param>
            <param name="predicate">Predicate called for each item to provide filter (can be null)</param>
            <returns>Enumerable list of visuals</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.VisualChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This enumerates the children of the given starting DPO.
            </summary>
            <param name="fe">Start</param>
            <returns>Collection of children (enumerator)</returns>
        </member>
        <member name="M:JulMar.Extensions.DependencyObjectExtensions.TryFindResource(Windows.UI.Xaml.FrameworkElement,System.String,System.Object@)">
            <summary>
            Performs a resource lookup, walking up the parent chain.
            </summary>
            <param name="fe"></param>
            <param name="name"></param>
            <param name="value"> </param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Extensions.Designer">
            <summary>
            Properties used to control the design surface details
            </summary>
        </member>
        <member name="P:JulMar.Extensions.Designer.InDesignMode">
            <summary>
            Returns true/false whether the code is currently being executed by a designer surface
            (Blend or Visual Studio).
            </summary>
        </member>
        <member name="P:JulMar.Extensions.UICommandExtensions.WindowsCommand.Invoked">
            <summary>
            Gets or sets the handler for the event that is fired when the user invokes the command.
            </summary>
            <returns>
            The event handler for the command.
            </returns>
        </member>
        <member name="T:JulMar.Interactivity.BindingTriggerBehavior">
            <summary>
            This provides a Blend trigger based on a Data Binding expression with a comparison value.
            This differs from the built-in DataTriggerBehavior in two ways:
            1. If no comparison value is provided, the action is always executed when the binding changes
            2. The binding value is passed as the parameter to the action.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.BindingTriggerBehavior.BindingProperty">
            <summary>
            Backing storage for the Binding
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.BindingTriggerBehavior.Binding">
            <summary>
            Binding to monitor
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.BindingTriggerBehavior.ComparisonConditionProperty">
            <summary>
            Backing storage for the comparison condition
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.BindingTriggerBehavior.ComparisonCondition">
            <summary>
            Comparison condition (==, >, >=, etc.)
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.BindingTriggerBehavior.ValueProperty">
            <summary>
            Backing storage for the compare value
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.BindingTriggerBehavior.Value">
            <summary>
            Comparison value
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.BindingTriggerBehavior.ActionsProperty">
            <summary>
            Backing storage for Actions collection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.BindingTriggerBehavior.Actions">
            <summary>
            Actions collection
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.BindingTriggerBehavior.OnBindingChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler method for the binding change
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.BindingTriggerBehavior.EvaluateBindingChange(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called each time our source binding changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.BindingTriggerBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.BindingTriggerBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.BindingTriggerBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.DragPositionBehavior">
            <summary>
            This Blend behavior provides positional translation for elements through a 
            RenderTransform using Drag/Drop semantics.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.DragPositionBehavior.IsEnabledProperty">
            <summary>
            This property allows the behavior to be used as a traditional
            attached property behavior.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.GetIsEnabled(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns whether DragPositionBehavior is enabled via attached property
            </summary>
            <param name="uie">Element</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.SetIsEnabled(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Adds DragPositionBehavior to an element
            </summary>
            <param name="uie">Element to apply</param>
            <param name="value">True/False</param>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.OnIsEnabledChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This is called when the IsEnabled property has changed.
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Interactivity.DragPositionBehavior.ElementMouseDrag">
            <summary>
            This class encapsulates the drag data + logic for a given element.
            It saves memory space as it is only allocated while the object is
            being dragged around.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.OnPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Handles the MouseDown event
            </summary>
            <param name="sender">UIElement</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.DragPositionBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.DragPositionBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.Input.KeyTriggerBehavior">
            <summary>
            A trigger based on a keystroke
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerBehavior.ActionsProperty">
            <summary>
            Backing storage for Actions collection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Input.KeyTriggerBehavior.Actions">
            <summary>
            Actions collection
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerBehavior.FiredOnProperty">
            <summary>
            Backing storage for FiredOn property
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Input.KeyTriggerBehavior.FiredOn">
            <summary>
            Determine when the trigger reacts
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerBehavior.KeyProperty">
            <summary>
            Backing storage for the key to watch for
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Input.KeyTriggerBehavior.Key">
            <summary>
            Key to watch for
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerBehavior.ModifiersProperty">
            <summary>
            Backing storage for the modifiers
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Input.KeyTriggerBehavior.Modifiers">
            <summary>
            Additional keys (CTRL,Alt, Win,etc.)
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.Input.KeyTriggerBehavior.HookEvents">
            <summary>
            This method hooks into the keyboard events for the window.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.Input.KeyTriggerBehavior.OnKeyPress(Windows.UI.Core.CoreWindow,Windows.UI.Core.KeyEventArgs)">
            <summary>
            Method called when a key is pressed/released
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.Input.KeyTriggerBehavior.IsModifierKeyDown">
            <summary>
            Test for modifier keys
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Interactivity.Input.KeyTriggerBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.Input.KeyTriggerBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.Input.KeyTriggerBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.Input.KeyTriggerFiredOn">
            <summary>
            Type of key trigger to act on
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerFiredOn.KeyDown">
            <summary>
            Key down
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.KeyTriggerFiredOn.KeyUp">
            <summary>
            Key up
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.Input.ModifierKeys">
            <summary>
            This mirrors the VirtualKeyModifiers, but is based on int vs. uint
            so it can be created in XAML.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.ModifierKeys.None">
            <summary>
            No modifier
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.ModifierKeys.Control">
            <summary>
            Ctrl key
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.ModifierKeys.Menu">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.ModifierKeys.Shift">
            <summary>
            Shift key
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Input.ModifierKeys.Windows">
            <summary>
            Windows key
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.Internal.ComparisonLogic">
            <summary>
            This performs specific comparison logic
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.Internal.ComparisonLogic.Evaluate(System.Object,Microsoft.Xaml.Interactions.Core.ComparisonConditionType,System.Object)">
            <summary>
            Method to compare two objects
            </summary>
            <param name="leftOperand"></param>
            <param name="operatorType"></param>
            <param name="rightOperand"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Interactivity.Internal.ComparisonLogic.EvaluateComparable(System.IComparable,Microsoft.Xaml.Interactions.Core.ComparisonConditionType,System.IComparable)">
            <summary>
            Method to compare two operands using IComparable
            </summary>
            <param name="leftOperand"></param>
            <param name="operatorType"></param>
            <param name="rightOperand"></param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Interactivity.Internal.DataBindingHelper">
            <summary>
            Binding helper
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.InvokeCommand">
            <summary>
            This trigger action binds a command/command parameter for MVVM usage with 
            a Blend based trigger.  This can be used as an alternative to EventCommander.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.InvokeCommand.CommandProperty">
            <summary>
            ICommand to execute
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.InvokeCommand.CommandParameterProperty">
            <summary>
            Command parameter to pass to command execution
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.InvokeCommand.CommandParameterPathProperty">
            <summary>
            Path for CommandParameter when using Trigger Parameter
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.InvokeCommand.Command">
            <summary>
            Command to execute
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.InvokeCommand.CommandParameter">
            <summary>
            Command parameter
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.InvokeCommand.CommandParameterPath">
            <summary>
            Path for final command parameter
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.InvokeCommand.Execute(System.Object,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that is passed to the action by the behavior. Generally this is <seealso cref="P:Microsoft.Xaml.Interactivity.IBehavior.AssociatedObject"/> or a target object.</param><param name="parameter">The value of this parameter is determined by the caller.</param>
            <remarks>
            An example of parameter usage is EventTriggerBehavior, which passes the EventArgs as a parameter to its actions.
            </remarks>
            <returns>
            Returns the result of the action.
            </returns>
        </member>
        <member name="T:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior">
            <summary>
            Trigger to run an action when a storyboard finishes.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.StoryboardProperty">
            <summary>
            Backing storage for the Storyboard
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.Storyboard">
            <summary>
            Storyboard to work with
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.ActionsProperty">
            <summary>
            Backing storage for Actions collection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.Actions">
            <summary>
            Actions collection
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.OnStoryboardChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when the storyboard is changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.StoryboardCompleted(System.Object,System.Object)">
            <summary>
            Method called when the storyboard completes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.OnStoryboardChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Change notification handler for the storyboard
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.Media.StoryboardCompletedTriggerBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.SetFocusAction">
            <summary>
            Shifts focus to some control
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.SetFocusAction.TargetProperty">
            <summary>
            Backing storage for Target property
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.SetFocusAction.Target">
            <summary>
            The focus target.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SetFocusAction.Execute(System.Object,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that is passed to the action by the behavior. Generally this is <seealso cref="P:Microsoft.Xaml.Interactivity.IBehavior.AssociatedObject"/> or a target object.</param><param name="parameter">The value of this parameter is determined by the caller.</param>
            <remarks>
            An example of parameter usage is EventTriggerBehavior, which passes the EventArgs as a parameter to its actions.
            </remarks>
            <returns>
            Returns the result of the action.
            </returns>
        </member>
        <member name="T:JulMar.Interactivity.SynchronizedCollectionBehavior">
            <summary>
            This behavior provides a multi-selection binder to tie a ViewModel collection to
            a multi-select list.  This includes ListBox, ListView, GridView, and anything
            else which supports the Selector or MultiSelector base class.
            
            This can be attached through the normal Interaction.Behaviors mechanism 
            or through the IsEnabled attached property (set to a collection).
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.SynchronizedCollectionBehavior.CollectionProperty">
            <summary>
            Property to associate selected items
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.SynchronizedCollectionBehavior.Collection">
            <summary>
            Instance wrapper for selected items backing storage
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.SynchronizedCollectionBehavior.IsEnabledProperty">
            <summary>
            Property to associate selected items
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.GetIsEnabled(Windows.UI.Xaml.Controls.Primitives.Selector)">
            <summary>
            Get the collection value
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.SetIsEnabled(Windows.UI.Xaml.Controls.Primitives.Selector,System.Collections.IEnumerable)">
            <summary>
            Set the collection value
            </summary>
            <param name="control"></param>
            <param name="collection"></param>
        </member>
        <member name="F:JulMar.Interactivity.SynchronizedCollectionBehavior.BindsTwoWayProperty">
            <summary>
            True/False whether to go both directions in selection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.SynchronizedCollectionBehavior.BindsTwoWay">
            <summary>
            True/False whether to go both directions in selection
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.OnEnabledChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This is invoked when the behavior is attached through a property
            instead of the full interaction syntax.
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.GetSelectedItemsCollection">
            <summary>
            Retrieve the selected items collection from the associated
            object if it supports multiple selection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.OnBackingCollectionChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the SelectedItems property is changed.
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.OnBackingCollectionChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the SelectedItems property is changed.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.SynchronizeBackingStore(System.Boolean)">
            <summary>
            This synchronizes the backing collection with the ItemsControl
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Used to add/remove/clear items from unknown collection types
            This is done through reflection so we can support IList, IList(OfT), Collection(OfT), etc.
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.GetDeclaredMethod(System.Object,System.String)">
            <summary>
            Lookup a method name via reflection that also searches
            the base class type(s).
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.OnBackingStoreElementsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This is called when the elements inside the backed storage collection change.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.OnSelectionChanged(System.Object,Windows.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the Selection changed event is raised by the associated selector
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.SynchronizedCollectionBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.SynchronizedCollectionBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.TimerTriggerBehavior">
            <summary>
            Trigger which runs off a timer
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.TimerTriggerBehavior.ActionsProperty">
            <summary>
            Backing storage for Actions collection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.TimerTriggerBehavior.Actions">
            <summary>
            Actions collection
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.TimerTriggerBehavior.MillisecondsPerTickProperty">
            <summary>
            Backing storage for the counter
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.TimerTriggerBehavior.MillisecondsPerTick">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.TimerTriggerBehavior.TotalTicksProperty">
            <summary>
            Backing storage for the total ticks counter
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.TimerTriggerBehavior.TotalTicks">
            <summary>
            Total ticks elapsed
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.TimerTriggerBehavior.OnTimerTick(System.Object,System.Object)">
            <summary>
            Called when the timer elapses
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Interactivity.TimerTriggerBehavior.StartTimer">
            <summary>
            Called to start the timer
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.TimerTriggerBehavior.StopTimer">
            <summary>
            Called to stop the timer
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.TimerTriggerBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.TimerTriggerBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.TimerTriggerBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interactivity.ViewModelTriggerBehavior">
            <summary>
            This is a Blend trigger that binds to an event within a ViewModel and invokes actions when it 
            is raised by the ViewModel.  This allows the VM to trigger behaviors in the View easily.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.ViewModelTriggerBehavior.TargetProperty">
            <summary>
            The DependencyProperty used to hold the target object (VM).
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.ViewModelTriggerBehavior.Target">
            <summary> 
            Object holding event
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.ViewModelTriggerBehavior.EventNameProperty">
            <summary>
            The DependencyProperty used to hold the IViewModelTrigger.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.ViewModelTriggerBehavior.EventName">
            <summary> 
            Name of the event to hook into.
            </summary>
        </member>
        <member name="F:JulMar.Interactivity.ViewModelTriggerBehavior.ActionsProperty">
            <summary>
            Backing storage for Actions collection
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.ViewModelTriggerBehavior.Actions">
            <summary>
            Actions collection
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.OnEventNameChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for the event name
            </summary>
            <param name="dpo">VMTrigger object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.OnTargetChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for the event name
            </summary>
            <param name="dpo">VMTrigger object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.RegisterEvent(System.Object,System.String)">
            <summary>
            Register an event handler
            </summary>
            <param name="obj"></param>
            <param name="eventName"></param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.UnregisterEvent(System.Object,System.String)">
            <summary>
            Unregister an event handler
            </summary>
            <param name="obj"></param>
            <param name="eventName"></param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.LookForEventDeclaration(System.Object,System.String)">
            <summary>
            This searches the type for a given event - including ancestor classes.
            </summary>
            <param name="target"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.GetEventMethod(System.Reflection.EventInfo)">
            <summary>
            Retrieves a delegate to our OnEventRaised method which may be used with a specific
            EventHandler subtype based on an EventInfo.
            </summary>
            <param name="ei">Event to generate</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.OnEventRaisedWithParameter(System.Object)">
            <summary>
            This is invoked by the event - it runs all the actions
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.OnEventRaisedWithNoParameter">
            <summary>
            This is invoked by the event - it runs all the actions
            </summary>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.InvokeActions(System.Object)">
            <summary>
            Method to invoke our actions.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.Attach(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="associatedObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> will be attached.</param>
        </member>
        <member name="M:JulMar.Interactivity.ViewModelTriggerBehavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:JulMar.Interactivity.ViewModelTriggerBehavior.AssociatedObject">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which the <seealso cref="T:Microsoft.Xaml.Interactivity.IBehavior"/> is attached.
            </summary>
        </member>
        <member name="T:JulMar.Interfaces.NavigatingFromEventArgs">
            <summary>
            EventArgs for INavigationAware.OnNavigatingFrom
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatingFromEventArgs.NavigationMode">
            <summary>
            Navigation model
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatingFromEventArgs.Cancel">
            <summary>
            Set to true to cancel navigation
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatingFromEventArgs.IsSuspending">
            <summary>
            True if this is being called due to a suspension event
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatingFromEventArgs.State">
            <summary>
            The current page state
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.NavigatingFromEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.NavigatingFromEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor used for suspension
            </summary>
            <param name="stateDictionary"></param>
        </member>
        <member name="T:JulMar.Interfaces.NavigatedToEventArgs">
            <summary>
            EventArgs for the INavigationAware.OnNavigatedTo
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatedToEventArgs.NavigationMode">
            <summary>
            Navigation mode for this event
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatedToEventArgs.Parameter">
            <summary>
            Optional parameter being passed
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.NavigatedToEventArgs.State">
            <summary>
            ViewModel/Page state
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.NavigatedToEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationMode,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="T:JulMar.Interfaces.INavigationAware">
            <summary>
            This interface can be implemented by a ViewModel or Page to save/restore state
            during navigation.
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.INavigationAware.OnNavigatingFrom(JulMar.Interfaces.NavigatingFromEventArgs)">
            <summary>
            Notification that the Page associated with the ViewModel is navigating away
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.INavigationAware.OnNavigatedTo(JulMar.Interfaces.NavigatedToEventArgs)">
            <summary>
            Notification that the Page associated with the ViewModel is being navigating to
            </summary>
        </member>
        <member name="T:JulMar.Interfaces.IPageNavigator">
            <summary>
            This interface is used as the navigation services to switch pages in and out
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.IPageNavigator.StateManager">
            <summary>
            Optional state manager, if supplied it will be passed with the navigation events
            allowing the page to save session state.
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.IPageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key">Page key</param>
            <param name="type">Page type</param>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.UnregisterPage(System.String)">
            <summary>
            Un-register a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.IPageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.IPageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Interfaces.IPageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Interfaces.IPageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="T:JulMar.IO.RandomAccessStream">
            <summary>
            This class takes a .NET Stream and turns it into an IRandomAccessStream.
            It is not public, but is instead accessible through the AsRandomAccessStream() extension method.
            </summary>
        </member>
        <member name="F:JulMar.IO.RandomAccessStream._stream">
            <summary>
            The underlying stream.
            </summary>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor which takes the stream to layer IRandomAccessStream on top of.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.GetInputStreamAt(System.UInt64)">
            <summary>
            Returns an input stream at a specified location in a stream.
            </summary>
            <returns>
            The input stream.
            </returns>
            <param name="position">The location in the stream at which to begin.</param>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.GetOutputStreamAt(System.UInt64)">
            <summary>
            Returns an output stream at a specified location in a stream.
            </summary>
            <returns>
            The output stream.
            </returns>
            <param name="position">The location in the output stream at which to begin.</param>
        </member>
        <member name="P:JulMar.IO.RandomAccessStream.Size">
            <summary>
            Gets or sets the size of the random access stream.
            </summary>
            <returns>
            The size of the stream.
            </returns>
        </member>
        <member name="P:JulMar.IO.RandomAccessStream.CanRead">
            <summary>
            Gets a value that indicates whether the stream can be read from.
            </summary>
            <returns>
            True if the stream can be read from. Otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.IO.RandomAccessStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream can be written to.
            </summary>
            <returns>
            True if the stream can be written to. Otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.IO.RandomAccessStream.Position">
            <summary>
            Gets the byte offset of the stream.
            </summary>
            <returns>
            The number of bytes from the start of the stream.
            </returns>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.Seek(System.UInt64)">
            <summary>
            Sets the position of the stream to the specified value.
            </summary>
            <param name="position">The new position of the stream.</param>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.CloneStream">
            <summary>
            Creates a new instance of a IRandomAccessStream over the same resource as the current stream.
            </summary>
            <returns>
            The new stream. The initial, internal position of the stream is 0.The internal position and lifetime of this new stream are independent from the position and lifetime of the cloned stream.
            </returns>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <summary>
            Returns an asynchronous byte reader object.
            </summary>
            <returns>
            The asynchronous operation. 
            </returns>
            <param name="buffer">The buffer into which the asynchronous read operation places the bytes that are read.</param><param name="count">The number of bytes to read that is less than or equal to the Capacity value.</param><param name="options">Specifies the type of the asynchronous read operation.</param>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.FlushAsync">
            <summary>
            Flushes data asynchronously in a sequential stream.
            </summary>
            <returns>
            The stream flush operation.
            </returns>
        </member>
        <member name="M:JulMar.IO.RandomAccessStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <summary>
            Writes data asynchronously in a sequential stream.
            </summary>
            <returns>
            The byte writer operation.
            </returns>
            <param name="buffer">The buffer into which the asynchronous writer operation writes.</param>
        </member>
        <member name="T:JulMar.IO.StreamExtensions">
            <summary>
            Extension methods for streams
            </summary>
        </member>
        <member name="M:JulMar.IO.StreamExtensions.AsRandomAccessStream(System.IO.Stream)">
            <summary>
            Returns an IRandomAccessStream for a given stream input
            </summary>
            <param name="stream">Stream to wrap</param>
            <returns>WinRT RandomAccessStream</returns>
        </member>
        <member name="T:JulMar.Mvvm.ViewModelLocator">
            <summary>
            ViewModel locator resource lookup.  This provides markup support for the 
            IViewModelLocator service.  It can be used two different ways:
              a) By placing an instance of the ViewModelLocator into Application.Resources in XAML and
                 then data binding to the resource with the [ViewModelKey] path (array indexer).
              b) Through the ViewModelLocator.Key attached property which sets the 
                 DataContext of the element to which it is attached
            </summary>
        </member>
        <member name="F:JulMar.Mvvm.ViewModelLocator.KeyProperty">
            <summary>
            ViewModel key
            </summary>
        </member>
        <member name="P:JulMar.Mvvm.ViewModelLocator.ViewModels">
            <summary>
            ViewModel dictionary - can be used as indexer operator in Binding expressions.
            </summary>
        </member>
        <member name="M:JulMar.Mvvm.ViewModelLocator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Mvvm.ViewModelLocator.OnViewModelKeyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ViewModelKey property is changed on an UI element.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Mvvm.ViewModelLocator.GetKey(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Get the ViewModelKey property value
            </summary>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Mvvm.ViewModelLocator.SetKey(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Sets the ViewModelKey property value.
            </summary>
            <param name="fe"></param>
            <param name="key"></param>
        </member>
        <member name="T:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent">
            <summary>
            Notification content object to display a glyph on a tile's badge.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.#ctor">
            <summary>
            Default constructor to create a glyph badge content object.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.#ctor(JulMar.Notifications.BadgeContent.GlyphValue)">
            <summary>
            Constructor to create a glyph badge content object with a glyph.
            </summary>
            <param name="glyph">The glyph to be displayed on the badge.</param>
        </member>
        <member name="P:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.Glyph">
            <summary>
            The glyph to be displayed on the badge.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.ToString">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeGlyphNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="T:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent">
            <summary>
            Notification content object to display a number on a tile's badge.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.#ctor">
            <summary>
            Default constructor to create a numeric badge content object.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.#ctor(System.UInt32)">
            <summary>
            Constructor to create a numeric badge content object with a number.
            </summary>
            <param name="number">
            The number that will appear on the badge.  If the number is 0, the badge
            will be removed.  The largest value that will appear on the badge is 99.
            Numbers greater than 99 are allowed, but will be displayed as "99+".
            </param>
        </member>
        <member name="P:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.Number">
            <summary>
            The number that will appear on the badge.  If the number is 0, the badge
            will be removed.  The largest value that will appear on the badge is 99.
            Numbers greater than 99 are allowed, but will be displayed as "99+".
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.ToString">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.BadgeNumericNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="T:JulMar.Notifications.BadgeContent.GlyphValue">
            <summary>
            The types of glyphs that can be placed on a badge.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.None">
            <summary>
            No glyph.  If there is a numeric badge, or a glyph currently on the badge,
            it will be removed.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Activity">
            <summary>
            A glyph representing application activity.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Alert">
            <summary>
            A glyph representing an alert.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Available">
            <summary>
            A glyph representing availability status.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Away">
            <summary>
            A glyph representing away status
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Busy">
            <summary>
            A glyph representing busy status.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.NewMessage">
            <summary>
            A glyph representing that a new message is available.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Paused">
            <summary>
            A glyph representing that media is paused.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Playing">
            <summary>
            A glyph representing that media is playing.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Unavailable">
            <summary>
            A glyph representing unavailable status.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Error">
            <summary>
            A glyph representing an error.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.BadgeContent.GlyphValue.Attention">
            <summary>
            A glyph representing attention status.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.BadgeContent.IBadgeNotificationContent">
            <summary>
            Base badge notification content interface.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.BadgeContent.IBadgeNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="T:JulMar.Notifications.INotificationContent">
            <summary>
            Base notification content interface to retrieve notification Xml as a string.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.INotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Notifications.INotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="T:JulMar.Notifications.INotificationContentImage">
            <summary>
            A type contained by the tile and toast notification content objects that
            represents an image in a template.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.INotificationContentImage.Src">
            <summary>
            The location of the image.  Relative image paths use the BaseUri provided in the containing
            notification object.  If no BaseUri is provided, paths are relative to ms-appx:///.
            Only png and jpg images are supported.  Images must be 1024x1024 pixels or less, and smaller than
            200 kB in size.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.INotificationContentImage.Alt">
            <summary>
            Alt text that describes the image.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.INotificationContentImage.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto the Src
            If false, Windows will not append query strings onto the Src
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="T:JulMar.Notifications.NotificationContentImage">
            <summary>
            Internal class
            </summary>
        </member>
        <member name="T:JulMar.Notifications.INotificationContentText">
            <summary>
            A type contained by the tile and toast notification content objects that
            represents a text field in the template.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.INotificationContentText.Text">
            <summary>
            The text value that will be shown in the text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.INotificationContentText.Lang">
            <summary>
            The language of the text field.  This property overrides the language provided in the
            containing notification object.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.NotificationContentText">
            <summary>
            Internal class
            </summary>
        </member>
        <member name="T:JulMar.Notifications.NotificationBase">
            <summary>
            Base class for the notification content creation helper classes.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.NotificationBase.Images">
            <summary>
            Retrieves the list of images that can be manipulated on the notification content.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.NotificationBase.TextFields">
            <summary>
            Retrieves the list of text fields that can be manipulated on the notification content.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.NotificationBase.BaseUri">
            <summary>
            The base Uri path that should be used for all image references in the notification.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.NotificationContentValidationException">
            <summary>
            Exception returned when invalid notification content is provided.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.TileBranding">
            <summary>
            The types of behavior that can be used for application branding when
            tile notification content is displayed on the tile.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.TileContent.TileBranding.None">
            <summary>
            No application branding will be displayed on the tile content.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.TileContent.TileBranding.Logo">
            <summary>
            The application logo will be displayed with the tile content.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.TileContent.TileBranding.Name">
            <summary>
            The application name will be displayed with the tile content.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.TileContentFactory">
            <summary>
            A factory which creates tile content objects for all of the toast template types.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareBlock">
            <summary>
            Creates a tile content object for the TileSquareBlock template.
            </summary>
            <returns>A tile content object for the TileSquareBlock template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareImage">
            <summary>
            Creates a tile content object for the TileSquareImage template.
            </summary>
            <returns>A tile content object for the TileSquareImage template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText01">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText02">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText03">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText03 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText04">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText04 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareText01">
            <summary>
            Creates a tile content object for the TileSquareText01 template.
            </summary>
            <returns>A tile content object for the TileSquareText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareText02">
            <summary>
            Creates a tile content object for the TileSquareText02 template.
            </summary>
            <returns>A tile content object for the TileSquareText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareText03">
            <summary>
            Creates a tile content object for the TileSquareText03 template.
            </summary>
            <returns>A tile content object for the TileSquareText03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileSquareText04">
            <summary>
            Creates a tile content object for the TileSquareText04 template.
            </summary>
            <returns>A tile content object for the TileSquareText04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideBlockAndText01">
            <summary>
            Creates a tile content object for the TileWideBlockAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideBlockAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideBlockAndText02">
            <summary>
            Creates a tile content object for the TileWideBlockAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideBlockAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideImage">
            <summary>
            Creates a tile content object for the TileWideImage template.
            </summary>
            <returns>A tile content object for the TileWideImage template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideImageAndText01">
            <summary>
            Creates a tile content object for the TileWideImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideImageAndText02">
            <summary>
            Creates a tile content object for the TileWideImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideImageCollection">
            <summary>
            Creates a tile content object for the TileWideImageCollection template.
            </summary>
            <returns>A tile content object for the TileWideImageCollection template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage01">
            <summary>
            Creates a tile content object for the TileWidePeekImage01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage02">
            <summary>
            Creates a tile content object for the TileWidePeekImage02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage03">
            <summary>
            Creates a tile content object for the TileWidePeekImage03 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage04">
            <summary>
            Creates a tile content object for the TileWidePeekImage04 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage05">
            <summary>
            Creates a tile content object for the TileWidePeekImage05 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage05 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage06">
            <summary>
            Creates a tile content object for the TileWidePeekImage06 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage06 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageAndText01">
            <summary>
            Creates a tile content object for the TileWidePeekImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageAndText02">
            <summary>
            Creates a tile content object for the TileWidePeekImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection01">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection02">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection03">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection03 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection04">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection04 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection05">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection05 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection05 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection06">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection06 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection06 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText01">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText02">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText03">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText03 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText04">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText04 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText05">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText05 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText05 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText01">
            <summary>
            Creates a tile content object for the TileWideText01 template.
            </summary>
            <returns>A tile content object for the TileWideText01 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText02">
            <summary>
            Creates a tile content object for the TileWideText02 template.
            </summary>
            <returns>A tile content object for the TileWideText02 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText03">
            <summary>
            Creates a tile content object for the TileWideText03 template.
            </summary>
            <returns>A tile content object for the TileWideText03 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText04">
            <summary>
            Creates a tile content object for the TileWideText04 template.
            </summary>
            <returns>A tile content object for the TileWideText04 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText05">
            <summary>
            Creates a tile content object for the TileWideText05 template.
            </summary>
            <returns>A tile content object for the TileWideText05 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText06">
            <summary>
            Creates a tile content object for the TileWideText06 template.
            </summary>
            <returns>A tile content object for the TileWideText06 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText07">
            <summary>
            Creates a tile content object for the TileWideText07 template.
            </summary>
            <returns>A tile content object for the TileWideText07 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText08">
            <summary>
            Creates a tile content object for the TileWideText08 template.
            </summary>
            <returns>A tile content object for the TileWideText08 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText09">
            <summary>
            Creates a tile content object for the TileWideText09 template.
            </summary>
            <returns>A tile content object for the TileWideText09 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText10">
            <summary>
            Creates a tile content object for the TileWideText10 template.
            </summary>
            <returns>A tile content object for the TileWideText10 template.</returns>
        </member>
        <member name="M:JulMar.Notifications.TileContent.TileContentFactory.CreateTileWideText11">
            <summary>
            Creates a tile content object for the TileWideText11 template.
            </summary>
            <returns>A tile content object for the TileWideText11 template.</returns>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileNotificationContent">
            <summary>
            Base tile notification content interface.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileNotificationContent.StrictValidation">
            <summary>
            Whether strict validation should be applied when the Xml or notification object is created,
            and when some of the properties are assigned.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileNotificationContent.Lang">
            <summary>
            The language of the content being displayed.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileNotificationContent.BaseUri">
            <summary>
            The BaseUri that should be used for image locations.  Relative image locations use this
            field as their base Uri.  The BaseUri must begin with http://, https://, ms-appx:///, or 
            ms-appdata:///local/.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileNotificationContent.Branding">
            <summary>
            Determines the application branding when tile notification content is displayed on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileNotificationContent.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto images that exist in this template
            If false (the default), Windows will not append query strings onto images that exist in this template
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="M:JulMar.Notifications.TileContent.ITileNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT TileNotification object based on the content.
            </summary>
            <returns>The WinRT TileNotification object</returns>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ISquareTileNotificationContent">
            <summary>
            Base square tile notification content interface.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.IWideTileNotificationContent">
            <summary>
            Base wide tile notification content interface.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.IWideTileNotificationContent.SquareContent">
            <summary>
            Corresponding square tile notification content should be a part of every wide tile notification.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.IWideTileNotificationContent.RequireSquareContent">
            <summary>
            Whether square tile notification content needs to be added to pass
            validation.  Square content is required by default.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareBlock">
            <summary>
            A square tile template that displays two text captions.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareBlock.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareBlock.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareImage">
            <summary>
            A square tile template that displays an image.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareImage.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01">
            <summary>
            A square tile template that displays an image, then transitions to show
            four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText02">
            <summary>
            A square tile template that displays an image, then transitions to show
            two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03">
            <summary>
            A square tile template that displays an image, then transitions to show
            four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText04">
            <summary>
            A square tile template that displays an image, then transitions to 
            show a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquarePeekImageAndText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareText01">
            <summary>
            A square tile template that displays four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareText02">
            <summary>
            A square tile template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareText03">
            <summary>
            A square tile template that displays four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText03.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText03.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText03.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText03.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileSquareText04">
            <summary>
            A square tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileSquareText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideBlockAndText01">
            <summary>
            A square tile template that displays six text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText01.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideBlockAndText02">
            <summary>
            A square tile template that displays three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText02.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideBlockAndText02.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideImage">
            <summary>
            A wide tile template that displays an image.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImage.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideImageAndText01">
            <summary>
            A wide tile template that displays an image and a text caption.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageAndText01.TextCaptionWrap">
            <summary>
            A caption for the image.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideImageAndText02">
            <summary>
            A wide tile template that displays an image and two text captions.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageAndText02.TextCaption1">
            <summary>
            The first caption for the image.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageAndText02.TextCaption2">
            <summary>
            The second caption for the image.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideImageCollection">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageCollection.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn1Row1">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn2Row1">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn1Row2">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn2Row2">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage01">
            <summary>
            A wide tile template that displays an image, then transitions to show
            two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage02">
            <summary>
            A wide tile template that displays an image, then transitions to show
            five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage03">
            <summary>
            A wide tile template that displays an image, then transitions to show
            a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage04">
            <summary>
            A wide tile template that displays an image, then transitions to show
            a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage05">
            <summary>
            A wide tile template that displays an image, then transitions to show
            another image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage05.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage05.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImage06">
            <summary>
            A wide tile template that displays an image, then transitions to show
            another image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage06.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage06.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImage06.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageAndText01">
            <summary>
            A wide tile template that displays an image and a portion of a text field,
            then transitions to show all of the text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02">
            <summary>
            A wide tile template that displays an image and a text field,
            then transitions to show the text field and four other text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody5">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection01">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show two
            text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show five
            text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection03">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show a
            text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection04">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show a
            text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection05">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show an image
            and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection05.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWidePeekImageCollection06">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show an image
            and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection06.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWidePeekImageCollection06.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideSmallImageAndText01">
            <summary>
            A wide tile template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText01.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02">
            <summary>
            A wide tile template that displays an image and 5 text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideSmallImageAndText03">
            <summary>
            A wide tile template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText03.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideSmallImageAndText04">
            <summary>
            A wide tile template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideSmallImageAndText05">
            <summary>
            A wide tile template that displays a poster image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText05.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideSmallImageAndText05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText01">
            <summary>
            A wide tile template that displays five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText01.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText02">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText02.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText03">
            <summary>
            A wide tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText04">
            <summary>
            A wide tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText05">
            <summary>
            A wide tile template that displays five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText05.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText05.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText05.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText05.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText05.TextBody5">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText06">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText06.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText07">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextShortColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextShortColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextShortColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextShortColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText07.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText08">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextShortColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextShortColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextShortColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextShortColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextShortColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText08.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText09">
            <summary>
            A wide tile template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText09.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText09.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText10">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText10.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.TileContent.ITileWideText11">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.TileContent.ITileWideText11.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastAudio">
            <summary>
            Type representing the toast notification audio properties which is contained within
            a toast notification content object.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastAudio.Content">
            <summary>
            The audio content that should be played when the toast is shown.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastAudio.Loop">
            <summary>
            Whether the audio should loop.  If this property is set to true, the toast audio content
            must be a looping sound.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastNotificationContent">
            <summary>
            Base toast notification content interface.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.StrictValidation">
            <summary>
            Whether strict validation should be applied when the Xml or notification object is created,
            and when some of the properties are assigned.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.Lang">
            <summary>
            The language of the content being displayed.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.BaseUri">
            <summary>
            The BaseUri that should be used for image locations.  Relative image locations use this
            field as their base Uri.  The BaseUri must begin with http://, https://, ms-appx:///, or 
            ms-appdata:///local/.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto images that exist in this template
            If false (the default, Windows will not append query strings onto images that exist in this template            
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.Launch">
            <summary>
            The launch parameter passed into the Windows Store app when the toast is activated.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.Audio">
            <summary>
            The audio that should be played when the toast is displayed.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastNotificationContent.Duration">
            <summary>
            The length that the toast should be displayed on screen.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.IToastNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT ToastNotification object based on the content.
            </summary>
            <returns>A WinRT ToastNotification object based on the content.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.IToastNotificationContent.FromPackage(System.String)">
            <summary>
            Generates a package URI
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.ToastAudioContent">
            <summary>
            The audio options that can be played while the toast is on screen.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.Default">
            <summary>
            The default toast audio sound.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.Mail">
            <summary>
            Audio that corresponds to new mail arriving.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.SMS">
            <summary>
            Audio that corresponds to a new SMS message arriving.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.IM">
            <summary>
            Audio that corresponds to a new IM arriving.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.Reminder">
            <summary>
            Audio that corresponds to a reminder.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.LoopingCall">
            <summary>
            The default looping sound.  Audio that corresponds to a call.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.LoopingCall2">
            <summary>
            Audio that corresponds to a call.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.LoopingAlarm">
            <summary>
            Audio that corresponds to an alarm.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.LoopingAlarm2">
            <summary>
            Audio that corresponds to an alarm.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastAudioContent.Silent">
            <summary>
            No audio should be played when the toast is displayed.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.ToastContentFactory">
            <summary>
            A factory which creates toast content objects for all of the toast template types.
            </summary>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText01">
            <summary>
            Creates a ToastImageAndText01 template content object.
            </summary>
            <returns>A ToastImageAndText01 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText02">
            <summary>
            Creates a ToastImageAndText02 template content object.
            </summary>
            <returns>A ToastImageAndText02 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText03">
            <summary>
            Creates a ToastImageAndText03 template content object.
            </summary>
            <returns>A ToastImageAndText03 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText04">
            <summary>
            Creates a ToastImageAndText04 template content object.
            </summary>
            <returns>A ToastImageAndText04 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastText01">
            <summary>
            Creates a ToastText01 template content object.
            </summary>
            <returns>A ToastText01 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastText02">
            <summary>
            Creates a ToastText02 template content object.
            </summary>
            <returns>A ToastText02 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastText03">
            <summary>
            Creates a ToastText03 template content object.
            </summary>
            <returns>A ToastText03 template content object.</returns>
        </member>
        <member name="M:JulMar.Notifications.ToastContent.ToastContentFactory.CreateToastText04">
            <summary>
            Creates a ToastText04 template content object.
            </summary>
            <returns>A ToastText04 template content object.</returns>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.ToastDuration">
            <summary>
            The duration the toast should be displayed on screen.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastDuration.Short">
            <summary>
            Default behavior.  The toast will be on screen for a short amount of time.
            </summary>
        </member>
        <member name="F:JulMar.Notifications.ToastContent.ToastDuration.Long">
            <summary>
            The toast will be on screen for a longer amount of time.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastImageAndText01">
            <summary>
            A toast template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText01.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastImageAndText02">
            <summary>
            A toast template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText02.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastImageAndText03">
            <summary>
            A toast template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText03.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText03.TextBody">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastImageAndText04">
            <summary>
            A toast template that displays an image and three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText04.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText04.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastImageAndText04.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastText01">
            <summary>
            A toast template that displays a text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastText02">
            <summary>
            A toast template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastText03">
            <summary>
            A toast template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText03.TextBody">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Notifications.ToastContent.IToastText04">
            <summary>
            A toast template that displays three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText04.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Notifications.ToastContent.IToastText04.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Services.AutoSerializingPageNavigator">
            <summary>
            Page navigation service with auto-serialization support (JSon)
            </summary>
            <example>
            Replace default navigator in App.xaml.cs constructor:
                 ServiceLocator.Instance.Add(typeof(IPageNavigator), new AutoSerializingPageNavigator());
            </example>
            <remarks>
            Note that view model must all be serializable and use OnDeserialized initializers.
            </remarks>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.NavigationFrame">
            <summary>
            The root Frame 
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.Initialize">
            <summary>
            Initialize the navigator by hooking into the frame navigation events.
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.RootFrameOnNavigating(System.Object,Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs)">
            <summary>
            This is called when navigating FROM a page to a new page and handles the OnNavigatingFrom event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.HandleOnNavigatingFrom(Windows.UI.Xaml.Controls.Frame,Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean@,System.Boolean)">
            <summary>
            Handles the OnNavigatingFrom event which notifies a page/ViewModel that we are
            moving AWAY from that view.
            </summary>
            <param name="rootFrame"></param>
            <param name="navMode"></param>
            <param name="cancel"></param>
            <param name="suspending"></param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.RootFrameOnNavigated(System.Object,Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            This handles the Navigated TO event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.InflateViewModel(System.String)">
            <summary>
            Creates the ViewModel from a string.
            </summary>
            <param name="viewModelData"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.HandleOnNavigatingTo(Windows.UI.Xaml.FrameworkElement,System.Object,Windows.UI.Xaml.Navigation.NavigationMode,System.Object)">
            <summary>
            Handles the navigation when we are moving TO a new view/viewmodel.
            </summary>
            <param name="view"></param>
            <param name="viewModel"></param>
            <param name="navMode"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.ClearForwardHistory">
            <summary>
            Clear the back history
            </summary>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.StateManager">
            <summary>
            Optional state manager, if not supplied pulls the default.
            </summary>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.UnregisterPage(System.String)">
            <summary>
            Unregister a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Serializable view model, or argument to pass</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters, this method 
            is not supported by the auto serializing navigator.
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.Type)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.Type,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Serializable view model, or argument to pass</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.NavigateTo(System.Type,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.GenerateStateKey(System.String)">
            <summary>
            Generates the state key name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.ProcessSuspend">
            <summary>
            This is used to process a suspension
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.ProcessRestore(System.String)">
            <summary>
            Restore the current VM state after suspension
            </summary>
        </member>
        <member name="M:JulMar.Services.AutoSerializingPageNavigator.SetNavigationTarget(Windows.UI.Xaml.Controls.Frame,System.String)">
            <summary>
            This method can be used to change the frame which is being used for navigation
            for this specific navigator.
            </summary>
            <param name="frame">Frame to use</param>
            <param name="frameKey">Suspension key</param>
        </member>
        <member name="P:JulMar.Services.AutoSerializingPageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="T:JulMar.Services.PageViewMetadata">
            <summary>
            Class used to populate metadata used to identify views which 
            may be navigated to/from.
            </summary>
        </member>
        <member name="P:JulMar.Services.PageViewMetadata.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Services.PageViewMetadata.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="T:JulMar.Services.ExportPageAttribute">
            <summary>
            This is used to decorate a specific page in the UI and associate
            it to a string key.
            </summary>
        </member>
        <member name="P:JulMar.Services.ExportPageAttribute.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Services.ExportPageAttribute.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="M:JulMar.Services.ExportPageAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key used to locate page</param>
            <param name="type">Page type</param>
        </member>
        <member name="T:JulMar.Services.PageNavigator">
            <summary>
            Page navigation service
            </summary>
        </member>
        <member name="P:JulMar.Services.PageNavigator.NavigationFrame">
            <summary>
            The root Frame 
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.RootFrameOnNavigated(System.Object,Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            This handles the Navigated TO event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.HandleOnNavigatingTo(Windows.UI.Xaml.FrameworkElement,System.Object,Windows.UI.Xaml.Navigation.NavigationMode,System.Object)">
            <summary>
            Handles the navigation when we are moving TO a new view/viewmodel.
            </summary>
            <param name="view"></param>
            <param name="viewModel"></param>
            <param name="navMode"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.RootFrameOnNavigating(System.Object,Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs)">
            <summary>
            This is called when navigating FROM a page to a new page and handles the OnNavigatingFrom event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.HandleOnNavigatingFrom(Windows.UI.Xaml.Controls.Frame,Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean@,System.Boolean)">
            <summary>
            Handles the OnNavigatingFrom event which notifies a page/ViewModel that we are
            moving AWAY from that view.
            </summary>
            <param name="rootFrame"></param>
            <param name="navMode"></param>
            <param name="cancel"></param>
            <param name="suspending"></param>
        </member>
        <member name="P:JulMar.Services.PageNavigator.StateManager">
            <summary>
            Optional state manager, if not supplied pulls the default.
            </summary>
        </member>
        <member name="P:JulMar.Services.PageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.UnregisterPage(System.String)">
            <summary>
            Unregister a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.Type)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.Type,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.GenerateStateKey(System.String)">
            <summary>
            Generates the state key name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.PageNavigator.NavigateTo(System.Type,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Services.PageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Services.PageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="P:JulMar.Services.PageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.ClearForwardHistory">
            <summary>
            Clear the back history
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.ProcessSuspend">
            <summary>
            This is used to process a suspension
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.ProcessRestore">
            <summary>
            Restore the current VM state after suspension
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="M:JulMar.Services.PageNavigator.SetNavigationTarget(Windows.UI.Xaml.Controls.Frame,System.String)">
            <summary>
            This method can be used to change the frame which is being used for navigation
            for this specific navigator.
            </summary>
            <param name="frame">Frame to use</param>
            <param name="frameKey">Suspension key</param>
        </member>
        <member name="P:JulMar.Services.PageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="T:JulMar.Services.ServiceLocatorResource">
            <summary>
            This class allows an injected service location into resources for
            XAML based binding lookups
            </summary>
            <example>
            <![CDATA[
              <Page.Resources>
                 <ServiceLocatorResource Type="ViewModelLocator" x:Key="vmLocator" />
              </Page.Resources>
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Services.ServiceLocatorResource.TypeProperty">
            <summary>
            Backing storage for the type
            </summary>
        </member>
        <member name="M:JulMar.Services.ServiceLocatorResource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Services.ServiceLocatorResource.#ctor(System.Type)">
            <summary>
            Code constructor
            </summary>
            <param name="type">Type to lookup</param>
        </member>
        <member name="P:JulMar.Services.ServiceLocatorResource.Type">
            <summary>
            Type to lookup
            </summary>
        </member>
        <member name="P:JulMar.Services.ServiceLocatorResource.Instance">
            <summary>
            Located Instance
            </summary>
        </member>
        <member name="T:JulMar.Services.ViewModelStateAttribute">
            <summary>
            Attribute used to mark properties which should be persisted to dictionary.
            The properties MUST be public and have public setters.
            </summary>
        </member>
        <member name="T:JulMar.Services.StateManager">
            <summary>
            State Manager class to load and save a ViewModel to a dictionary
            </summary>
        </member>
        <member name="M:JulMar.Services.StateManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:JulMar.Services.StateManager.Filename">
            <summary>
            Filename to use for storage
            </summary>
        </member>
        <member name="F:JulMar.Services.StateManager._values">
            <summary>
            Values collection
            </summary>
        </member>
        <member name="P:JulMar.Services.StateManager.KnownTypes">
            <summary>
            List of known types
            </summary>
        </member>
        <member name="M:JulMar.Services.StateManager.GetDictionary(System.String,System.Boolean)">
            <summary>
            Returns the state-specific dictionary for a key
            </summary>
            <param name="key"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.StateManager.RemoveDictionary(System.String)">
            <summary>
            Removes the given state dictionary based on the key
            </summary>
            <param name="key"></param>
            <returns>Success code</returns>
        </member>
        <member name="M:JulMar.Services.StateManager.LoadObject(System.String,System.Object)">
            <summary>
            Loads an object's state from a given key in the dictionary
            </summary>
            <param name="key">Key</param>
            <param name="viewModel">ViewModel object</param>
        </member>
        <member name="M:JulMar.Services.StateManager.SaveObject(System.String,System.Object)">
            <summary>
            Saves an object's state into the dictionary using a given key.
            </summary>
            <param name="key"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:JulMar.Services.StateManager.LoadAsync">
            <summary>
            Restore the state from persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.StateManager.SaveAsync">
            <summary>
            Encrypts and saves the state to persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Services.StateManager.Load(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Loads the state of an object (ViewModel) from the state dictionary.
            </summary>
            <param name="stateDictionary"></param>
            <param name="viewModel"></param>
            <param name="properties"></param>
        </member>
        <member name="M:JulMar.Services.StateManager.Save(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Saves a ViewModel into a child dictionary using a specific key
            </summary>
            <param name="stateDictionary"></param>
            <param name="viewModel"></param>
            <param name="properties"></param>
        </member>
        <member name="T:JulMar.Services.StateManagerException">
            <summary>
            Exception used when the state manager fails to load or save the settings.
            </summary>
        </member>
        <member name="M:JulMar.Services.StateManagerException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Services.StateManagerException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Services.StateManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.UI.AccessKey">
            <summary>
            Class to add an accelerator key to a control
            </summary>
        </member>
        <member name="F:JulMar.UI.AccessKey.AcceleratorProperty">
            <summary>
            Keyboard accelerator
            </summary>
        </member>
        <member name="M:JulMar.UI.AccessKey.GetAccelerator(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Retrieve the keyboard accelerator for an element.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.UI.AccessKey.SetAccelerator(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Sets the keyboard accelerator for an element.
            </summary>
            <param name="owner"></param>
            <param name="keyText"></param>
        </member>
        <member name="M:JulMar.UI.AccessKey.ParseKeys(System.String)">
            <summary>
            Returns a list of virtual keys from a string.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.UI.AccessKey.CoreWindowOnActivated(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
            Called when the window gets or loses input focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.AccessKey.DispatcherOnAcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Detect an accelerator key
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.AccessKey.CheckForActiveKey">
            <summary>
            Look for an active key and shift focus when found.
            </summary>
        </member>
        <member name="M:JulMar.UI.AccessKey.OwnerOnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when a specific control we are monitoring is unloaded.
            We remove it from the list we are holding onto.
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="T:JulMar.UI.InputBinder">
            <summary>
            InputBinder binds keyboard events to ICommand implementations
            </summary>
        </member>
        <member name="F:JulMar.UI.InputBinder.MappingsProperty">
            <summary>
            Mappings backing store
            </summary>
        </member>
        <member name="M:JulMar.UI.InputBinder.GetMappings(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the mapping collection
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.UI.InputBinder.SetMappings(Windows.UI.Xaml.DependencyObject,JulMar.UI.InputBinderCollection)">
            <summary>
            This sets the mapping collection.
            </summary>
            <param name="obj">Dependency Object</param>
            <param name="value">Mapping collection</param>
        </member>
        <member name="M:JulMar.UI.InputBinder.OnMappingsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This changes the event mapping
            </summary>
            <param name="target"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.InputBinder.CoreWindowOnActivated(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
            Called when the window gets or loses input focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.InputBinder.OnForwardDataContext(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This is called when items are added to the collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.InputBinder.DispatcherOnAcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Called when an accelerator key is pressed (i.e. a key with a Menu)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.InputBinder.SenderOnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            The associated Page has been unloaded - want to detach
            from the global key events
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="M:JulMar.UI.InputBinder.CheckForActiveKey">
            <summary>
            Checks for any input binding match in the current keyboard state.
            If we find one, run the associated command.
            </summary>
        </member>
        <member name="T:JulMar.UI.InputBinding">
            <summary>
            A single input binding
            </summary>
        </member>
        <member name="F:JulMar.UI.InputBinding.CommandProperty">
            <summary>
            Command Property Dependency Property
            </summary>
        </member>
        <member name="F:JulMar.UI.InputBinding.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="F:JulMar.UI.InputBinding.KeyProperty">
            <summary>
            Parameter for the Key
            </summary>
        </member>
        <member name="P:JulMar.UI.InputBinding.Command">
            <summary>
            Gets or sets the Command property. 
            </summary>
        </member>
        <member name="P:JulMar.UI.InputBinding.CommandParameter">
            <summary>
            Gets or sets the CommandParameter property.
            </summary>
        </member>
        <member name="P:JulMar.UI.InputBinding.Key">
            <summary>
            Key which invokes command
            </summary>
        </member>
        <member name="M:JulMar.UI.InputBinding.OnKeyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the key associated with this command changes.
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.UI.InputBinding.OnKeyChanged(System.String)">
            <summary>
            Called when the key associated with this command changes.
            </summary>
            <param name="keys">Keys</param>
        </member>
        <member name="M:JulMar.UI.InputBinding.CheckKey(System.Collections.Generic.IList{Windows.System.VirtualKey})">
            <summary>
            Check a set of keys against a string
            </summary>
            <param name="keys">Keys</param>
            <returns></returns>
        </member>
        <member name="T:JulMar.UI.InputBinderCollection">
            <summary>
            Collection of input bindings
            </summary>
        </member>
        <member name="T:JulMar.UI.MessageVisualizer">
            <summary>
            This class implements the IMessageVisualizer for Metro
            </summary>
        </member>
        <member name="M:JulMar.UI.MessageVisualizer.ShowAsync(System.String,System.String)">
            <summary>
            ShowAsync is used for simple notifications with an OK button.
            </summary>
            <param name="message">The content to display in the notification.</param>
            <param name="title">The optional title to be shown</param>
        </member>
        <member name="M:JulMar.UI.MessageVisualizer.ShowAsync(System.String,System.String,JulMar.Interfaces.MessageVisualizerOptions)">
            <summary>
            Display a notification to the user with options.
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="visualizerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Converters.ArrayToStringConverter">
            <summary>
            This converts an array of objects to a string with a given separator.  The default
            separator is a comma, but it can be changed through a property.
            </summary>
        </member>
        <member name="P:JulMar.Converters.ArrayToStringConverter.Separator">
            <summary>
            Separator to use when joining strings
            </summary>
        </member>
        <member name="M:JulMar.Converters.ArrayToStringConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.ArrayToStringConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.DebugConverter">
            <summary>
            This provides a debugging output for a binding converter
            </summary>
        </member>
        <member name="P:JulMar.Converters.DebugConverter.Header">
            <summary>
            Header to add to string
            </summary>
        </member>
        <member name="M:JulMar.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Outputs all parameters to the debug console.
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.DebugConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.DoubleToIntegerConverter">
            <summary>
            This converts a double into an integer value, rounding the value off.
            It is useful when providing textual versions of scrollbar or slider values (on a tooltip).
            </summary>
        </member>
        <member name="M:JulMar.Converters.DoubleToIntegerConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.DoubleToIntegerConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.IntegerToBooleanConverter">
            <summary>
            Converts an integer value into a boolean true/false
            </summary>
        </member>
        <member name="P:JulMar.Converters.IntegerToBooleanConverter.ZeroTreatment">
            <summary>
            Mapping for zero to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="P:JulMar.Converters.IntegerToBooleanConverter.NonzeroTreatment">
            <summary>
            Mapping for non-zero to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="M:JulMar.Converters.IntegerToBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.IntegerToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.IntegerToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.MathConverter">
            <summary>
            This provides a simple Math converter which supports to add/subtract/multiply/divide by a constant.
            The operation can be "+", "-", "*" and "%".
            </summary>
            <example>
            <![CDATA[
                <me:MathConverter x:Key="mathCvt" />
                <TextBlock Text="{Binding ElementName=slider, Path=Value, Converter={StaticResource mathCvt}, ConverterParameter=+1}" />
            ]]>
            </example>
        </member>
        <member name="P:JulMar.Converters.MathConverter.Operation">
            <summary>
            Operation to set - used if no parameter is passed.
            </summary>
        </member>
        <member name="M:JulMar.Converters.MathConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JulMar.Converters.MathConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JulMar.Converters.NotBooleanConverter">
            <summary>
            This converter reverses a Boolean value (True == False, False == True).
            </summary>
        </member>
        <member name="M:JulMar.Converters.NotBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NotBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.NullBooleanConverter">
            <summary>
            This converts an object value to a boolean
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullBooleanConverter.NullTreatment">
            <summary>
            Mapping value for null - defaults to false.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullBooleanConverter.NonNullTreatment">
            <summary>
            Mapping value for non-null, defaults to true.
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NullBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.NullOrEmptyBooleanConverter">
            <summary>
            This converts an object value to a boolean
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullOrEmptyBooleanConverter.EmptyTreatment">
            <summary>
            Mapping value for null - defaults to false.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullOrEmptyBooleanConverter.NotEmptyTreatment">
            <summary>
            Mapping value for non-null, defaults to true.
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.NumericToDoubleConverter">
            <summary>
            This converts any numeric type to a double.  It is primarily used in template bindings where an integer value
            is bound to a RangeBase.Value property which requires a double.
            </summary>
        </member>
        <member name="M:JulMar.Converters.NumericToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NumericToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.ToStringConverter">
            <summary>
            This converts anything to a string using the ToString method. This is useful if you 
            want to do simple formatting but the element is not a String (StringFormat only works with string types)
            </summary>
        </member>
        <member name="M:JulMar.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.DelegateValueConverter">
            <summary>
            An IValueConverter instance based on delegates.
            </summary>
        </member>
        <member name="P:JulMar.Converters.DelegateValueConverter.Convert">
            <summary>
            Conversion delegate
            </summary>
        </member>
        <member name="P:JulMar.Converters.DelegateValueConverter.ConvertBack">
            <summary>
            Convert Back delegate
            </summary>
        </member>
        <member name="M:JulMar.Converters.DelegateValueConverter.#ctor(System.Func{System.Object,System.Type,System.Object,System.String,System.Object},System.Func{System.Object,System.Type,System.Object,System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="convertFunc">Convert func.</param>
            <param name="convertBackFunc">Convert back func.</param>
        </member>
        <member name="M:JulMar.Converters.DelegateValueConverter.Windows#UI#Xaml#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JulMar.Converters.DelegateValueConverter.Windows#UI#Xaml#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JulMar.Converters.BooleanToBrushConverter">
            <summary>
            This converts a Boolean value to a Brush
            </summary>
        </member>
        <member name="P:JulMar.Converters.BooleanToBrushConverter.TrueBrush">
            <summary>
            Mapping for True value
            </summary>
        </member>
        <member name="P:JulMar.Converters.BooleanToBrushConverter.FalseBrush">
            <summary>
            Mapping for False value
            </summary>
        </member>
        <member name="M:JulMar.Converters.BooleanToBrushConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.BooleanToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.BooleanToVisibilityConverter">
            <summary>
            This converts a Boolean to a Visibility.  It supports mapping the conversions.
            </summary>
        </member>
        <member name="P:JulMar.Converters.BooleanToVisibilityConverter.TrueTreatment">
            <summary>
            Mapping for True to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="P:JulMar.Converters.BooleanToVisibilityConverter.FalseTreatment">
            <summary>
            Mapping for False to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="M:JulMar.Converters.BooleanToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.IntegerToVisibilityConverter">
            <summary>
            This converts an integer value to a Visibility type.
            </summary>
        </member>
        <member name="P:JulMar.Converters.IntegerToVisibilityConverter.ZeroTreatment">
            <summary>
            Mapping for zero to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="P:JulMar.Converters.IntegerToVisibilityConverter.NonzeroTreatment">
            <summary>
            Mapping for non-zero to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="M:JulMar.Converters.IntegerToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.IntegerToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.IntegerToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.NullOrEmptyVisibilityConverter">
            <summary>
            This converts object presence to visibility.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullOrEmptyVisibilityConverter.EmptyTreatment">
            <summary>
            Visibility conversion when object is null.  Defaults to hidden.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullOrEmptyVisibilityConverter.NotEmptyTreatment">
            <summary>
            Visibility conversion when object is non-null.  Defaults to visible.
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NullOrEmptyVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Converters.NullVisibilityConverter">
            <summary>
            This converts object presence to visibility.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullVisibilityConverter.NullTreatment">
            <summary>
            Visibility conversion when object is null.  Defaults to hidden.
            </summary>
        </member>
        <member name="P:JulMar.Converters.NullVisibilityConverter.NonNullTreatment">
            <summary>
            Visibility conversion when object is non-null.  Defaults to visible.
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Converters.NullVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Converters.NullVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
    </members>
</doc>
